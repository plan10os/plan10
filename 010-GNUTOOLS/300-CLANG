# Build a stage0 clang/clang++ with compiler-rt and lld

cd ${LLVMSRC}
# make sure compiler-rt, libcxx, libcxxabi, libunwind are unpacking ${LLVMSRC}/projects
# and clang & lld in ${LLVMSRC}/llvmtools

# Fix typo in libcxx
cd projects/libcxx
patch -Np1 -i  ../../../src/patches/libcxx/strtoll_fix.patch
cd -

# Apply patches from void linux
patch -Np1 -i ../src/patches/llvm11-void/llvm-001-musl.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-002-ppcle.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-002-musl-ppc64-elfv2.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-003-ppc-secureplt.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-004-override-opt.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-005-ppc-bigpic.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-006-aarch64-mf_exec.patch

cd llvmtools/clang

patch -Np1 -i ../../../src/patches/llvm11-void/clang-001-fix-unwind-chain-inclusion.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-001-ppcle.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-002-add-musl-triples.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-003-ppc64-dynamic-linker-path.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-004-ppc64-musl-elfv2.patch

cd -

sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' projects/compiler-rt/cmake/config-ix.cmake

export CFLAGS=" -g -g1"
export CXXFLAGS=" -g -g1" 

# Update host/target triplet detection
cp -v ../files/config.guess cmake/
#cp -v ../../../files/config.guess ../../cmake/

# Building host tblgen ... fails. Do we need this???
#mkdir -p build/HOST && cd build/HOST && \
#CC=x86_64-mlfs-linux-musl-gcc CXX=x86_64-mlfs-linux-musl-g++ \
#cmake ../.. -DCMAKE_BUILD_TYPE=Release
#make -C utils/TableGen
#make -C llvmtools/clang/utils/TableGen


cmake -B build -G Ninja  \
      -DCMAKE_BUILD_TYPE=MinSizeRel \
      -DCMAKE_INSTALL_PREFIX="/cgnullvmtools" \
      -DCMAKE_C_COMPILER="${PLAN10_TARGET}-gcc" \
      -DCMAKE_CXX_COMPILER="${PLAN10_TARGET}-g++" \ 
      -DLLVM_BUILD_TESTS=OFF \
      -DLLVM_ENABLE_LIBEDIT=OFF \
      -DLLVM_ENABLE_LIBXML2=OFF \
      -DLLVM_INCLUDE_GO_TESTS=OFF \
      -DLLVM_INCLUDE_TESTS=OFF \
      -DLLVM_INCLUDE_DOCS=OFF \
      -DLLVM_INCLUDE_EXAMPLES=OFF \
      -DLLVM_INCLUDE_BENCHMARKS=OFF \
      -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl" \
      -DLLVM_HOST_TRIPLE="x86_64-pc-linux-musl" \
      -DLLVM_TARGET_ARCH="X86" \
      -DLLVM_TARGETS_TO_BUILD="X86" \
      -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl" \
      -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
      -DCOMPILER_RT_BUILD_XRAY=OFF \
      -DCOMPILER_RT_BUILD_PROFILE=OFF \
      -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
      -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
      -DCLANG_DEFAULT_CXX_STDLIB=libc++ \ 
      -DCLANG_DEFAULT_UNWINDLIB=libunwind \
      -DCLANG_DEFAULT_RTLIB=compiler-rt \
      -DICONV_LIBRARY_PATH="/cgnullvmtools/lib/libc.so" \
      -DDEFAULT_SYSROOT="/cgnullvmtools" \
      -DLIBCXX_HAS_MUSL_LIBC=ON \
      -DLLVM_ENABLE_LIBCXX=ON \
      -DCLANG_DEFAULT_LINKER="/cgnullvmtools/bin/ld.lld" \
      -DBacktrace_HEADER="/cgnullvmtools/include/execinfo.h" \
      -DCMAKE_EXE_LINKER_FLAGS="-Wl,-dynamic-linker /cgnullvmtools/lib/ld-musl-x86_64.so.1" \
      -DCMAKE_SHARED_LINKER_FLAGS="-Wl,-dynamic-linker /cgnullvmtools/lib/ld-musl-x86_64.so.1" \
      -DBacktrace_LIBRARY="/cgnullvmtools/lib/libexecinfo.so.1"


# Now ready to build
ninja -C build         && \
ninja -C build install && \ 
rm -rf build

# Configure clang to build binaries with /llvmllvmtools/lib/ld-musl-x86_64.so.1 instead
# of /lib/ld-musl-x86_64.so.1. This is similar in Musl-LFS/LFS when gcc specs 
# file is modified to use the  dynamic linker in /llvmtools instead of host's /lib
ln -sv clang-11   /cgnullvmtools/bin/x86_64-pc-linux-musl-clang
ln -sv clang-11   /cgnullvmtools/bin/x86_64-pc-linux-musl-clang++
cat > /cgnullvmtools/bin/x86_64-pc-linux-musl.cfg << "EOF"
-Wl,-dynamic-linker /llvmllvmtools/lib/ld-musl-x86_64.so.1
EOF

export PATH=/cgnullvmtools/bin:/llvmllvmtools/bin:/bin:/usr/bin


# Build options:
# BUILD_CLANG_FORMAT_VS_PLUGIN=OFF
# BUILD_SHARED_LIBS=OFF
# CLANG_BUILD_EXAMPLES=OFF
# CLANG_BUILD_TOOLS=ON
# CLANG_DEFAULT_CXX_STDLIB=libc++
# CLANG_DEFAULT_LINKER="/cgnullvmtools/bin/ld.lld"
# CLANG_DEFAULT_OBJCOPY=objcopy
# CLANG_DEFAULT_OPENMP_RUNTIME=libomp
# CLANG_DEFAULT_RTLIB=compiler-rt
# CLANG_DEFAULT_UNWINDLIB=libunwind
# CLANG_ENABLE_ARCMT=ON
# CLANG_ENABLE_PROTO_FUZZER=OFF
# CLANG_ENABLE_STATIC_ANALYZER=ON
# CLANG_INCLUDE_DOCS=OFF
# CLANG_INCLUDE_TESTS=OFF
# CLANG_INSTALL_SCANBUILD=ON
# CLANG_INSTALL_SCANVIEW=ON
# CLANG_LINK_CLANG_DYLIB=OFF
# CLANG_PLUGIN_SUPPORT=ON
# CLANG_SPAWN_CC1=OFF
# CLANG_TOOL_HANDLE_CXX_BUILD=ON
# CLANG_TOOL_HANDLE_LLVM_BUILD=ON
# CMAKE_INSTALL_PREFIX=/cgnullvmtools
# COMPILER_RT_BAREMETAL_BUILD=OFF
# COMPILER_RT_CAN_EXECUTE_TESTS=ON
#
# COMPILER_RT_DEBUG=OFF
# COMPILER_RT_DEFAULT_TARGET_ONLY=OFF
# COMPILER_RT_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl
# COMPILER_RT_ENABLE_WERROR=OFF
# COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=ON
# COMPILER_RT_EXTERNALIZE_DEBUGINFO=OFF
# COMPILER_RT_HWASAN_WITH_INTERCEPTORS=ON
# COMPILER_RT_INCLUDE_TESTS=OFF
# COMPILER_RT_INTERCEPT_LIBDISPA=OFF
# COMPILER_RT_LIBDISPATCH_INSTALL_PATH=OFF
# COMPILER_RT_SANITIZERS_TO_BUILD=ALL
# COMPILER_RT_USE_BUILTINS_LIBRARY=ON
# COMPILER_RT_USE_LIBCXX=ON
# DEFAULT_SYSROOT=/cgnullvmtools
# LIBCXXABI_ENABLE_ASSERTIONS=ON
# LIBCXXABI_ENABLE_EXCEPTIONS=ON
# LIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS=ON
# LIBCXXABI_ENABLE_PEDANTIC=ON
# LIBCXXABI_ENABLE_PIC=ON
# LIBCXXABI_ENABLE_SHARED=ON
# LIBCXXABI_ENABLE_STATIC=ON
# LIBCXXABI_ENABLE_STATIC_UNWIND=OFF
# LIBCXXABI_ENABLE_THREADS=ON
#
# LIBCXXABI_INSTALL_LIBRARY=ON
# LIBCXXABI_INSTALL_SHARED_LIBRARY=ON
# LIBCXXABI_INSTALL_STATIC_LIBRARY=ON
# LIBCXXABI_LIBCXX_INCLUDES=/mnt/plan10/sources/llvm/projects/libcxxabi/../libcxx/include
# LIBCXXABI_LIBCXX_LIBRARY_PATH=/mnt/plan10/sources/llvm/build/./lib
# LIBCXXABI_LIBCXX_PATH=/mnt/plan10/sources/llvm/projects/libcxxabi/../libcxx
# LIBCXX_CXX_ABI_INCLUDE_PATHS=/mnt/plan10/sources/llvm/projects/libcxx/../libcxxabi/include
# LIBCXX_ENABLE_ABI_LINKER_SCRIP=ON
#
# LIBCXX_ENABLE_RTTI=ON
# LIBCXX_ENABLE_SHARED=ON
# LIBCXX_ENABLE_STATIC=ON
# LIBCXX_ENABLE_STDIN=ON
# LIBCXX_ENABLE_STDOUT=ON
# LIBCXX_ENABLE_THREADS=ON
# LIBCXX_ENABLE_THREAD_UNSAFE_C_FUNCTIONS=ON
# LIBCXX_HAS_MUSL_LIBC=ON
# LIBCXX_INSTALL_EXPERIMENTAL_LIBRARY=ON
# LIBCXX_INSTALL_HEADERS=ON
# LIBCXX_INSTALL_LIBRARY=ON
# LIBCXX_INSTALL_SHARED_LIBRARY=ON
# LIBCXX_INSTALL_STATIC_LIBRARY=ON
# LIBCXX_INSTALL_SUPPORT_HEADERS=ON
#
# LLD_BUILD_TOOLS=ON
# LLVM_APPEND_VC_REV=ON
# LLVM_BUILD_RUNTIME=ON
# LLVM_BUILD_RUNTIMES=ON
# LLVM_BUILD_TOOLS=ON
# LLVM_BUILD_UTILS=ON
# LLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl"
# LLVM_DYLIB_COMPONENTS=ALL
# LLVM_ENABLE_BACKTRACES=ON
# LLVM_ENABLE_BINDINGS=ON
# LLVM_ENABLE_CRASH_OVERRIDES=ON
# LLVM_ENABLE_LIBCXX=ON
#
# LLVM_ENABLE_LIBEDIT=OFF
# LLVM_ENABLE_LIBPFM=ON
# LLVM_ENABLE_LIBXML2=OFF
# LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY=ON
# LLVM_ENABLE_PIC=ON
# LLVM_ENABLE_PLUGINS=ON
# LLVM_ENABLE_TERMINFO=ON
# LLVM_ENABLE_THREADS=ON
# LLVM_ENABLE_UNWIND_TABLES=ON
# LLVM_ENABLE_WARNINGS=ON
# LLVM_ENABLE_ZLIB=ON
#
# LLVM_HOST_TRIPLE="x86_64-pc-linux-musl"
# LLVM_INCLUDE_RUNTIMES=ON
# LLVM_INCLUDE_TOOLS=ON
# LLVM_INCLUDE_UTILS=ON
# LLVM_OPTIMIZE_SANITIZED_BUILDS=ON
# LLVM_TARGETS_TO_BUILD=X86
# LLVM_TARGET_ARCH=X86
# LLVM_TOOL_COMPILER_RT_BUILD=ON
# LLVM_TOOL_LIBCXXABI_BUILD=ON
# LLVM_TOOL_LIBCXX_BUILD=ON