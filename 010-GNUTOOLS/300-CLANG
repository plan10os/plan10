cd ${LLVMSRC}
# make sure compiler-rt, libcxx, libcxxabi, libunwind are unpacking ${LLVMSRC}/projects
# and clang & lld in ${LLVMSRC}/tools

# Fix typo in libcxx
cd projects/libcxx

cd -

# Apply patches from void linux
patch -Np1 -i ../src/patches/llvm11-void/llvm-001-musl.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-002-ppcle.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-002-musl-ppc64-elfv2.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-003-ppc-secureplt.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-004-override-opt.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-005-ppc-bigpic.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-006-aarch64-mf_exec.patch

cd tools/clang

patch -Np1 -i ../../../src/patches/llvm11-void/clang-001-fix-unwind-chain-inclusion.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-001-ppcle.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-002-add-musl-triples.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-003-ppc64-dynamic-linker-path.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-004-ppc64-musl-elfv2.patch

cd -

sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' projects/compiler-rt/cmake/config-ix.cmake

export CFLAGS=" -g -g1"
export CXXFLAGS=" -g -g1" 

# Update truple detection
cp -v ../files/config.guess cmake/
#cp -v ../../../files/config.guess ../../cmake/

# Building host tblgen
#mkdir -p build/HOST && cd build/HOST && \
#CC=x86_64-mlfs-linux-musl-gcc CXX=x86_64-mlfs-linux-musl-g++ \
#cmake ../.. -DCMAKE_BUILD_TYPE=Release
#make -C utils/TableGen
#make -C tools/clang/utils/TableGen


cmake -B build -G Ninja  \
      -DCMAKE_BUILD_TYPE=MinSizeRel \
      -DCMAKE_INSTALL_PREFIX="/cgnutools" \
      -DCMAKE_C_COMPILER="${PLAN10_TARGET}-gcc" \
      -DCMAKE_CXX_COMPILER="${PLAN10_TARGET}-g++" \ 
      -DLLVM_BUILD_TESTS=OFF \
      -DLLVM_ENABLE_LIBEDIT=OFF \
      -DLLVM_ENABLE_LIBXML2=OFF \
      -DLLVM_INCLUDE_GO_TESTS=OFF \
      -DLLVM_INCLUDE_TESTS=OFF \
      -DLLVM_INCLUDE_DOCS=OFF \
      -DLLVM_INCLUDE_EXAMPLES=OFF \
      -DLLVM_INCLUDE_BENCHMARKS=OFF \
      -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl" \
      -DLLVM_HOST_TRIPLE="x86_64-pc-linux-musl" \
      -DLLVM_TARGET_ARCH="X86" \
      -DLLVM_TARGETS_TO_BUILD="X86" \
      -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl" \
      -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
      -DCOMPILER_RT_BUILD_XRAY=OFF \
      -DCOMPILER_RT_BUILD_PROFILE=OFF \
      -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
      -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
      -DCLANG_DEFAULT_CXX_STDLIB=libc++ \ 
      -DCLANG_DEFAULT_UNWINDLIB=libunwind \
      -DCLANG_DEFAULT_RTLIB=compiler-rt \
      -DICONV_LIBRARY_PATH="/cgnutools/lib/libc.so" \
      -DDEFAULT_SYSROOT="/cgnutools" \
      -DLIBCXXABI_TARGET_TRIPLE="x86_64-pc-linux-musl" \
      -DLIBCXX_HAS_MUSL_LIBC=ON \
      -DLLVM_ENABLE_LIBCXX=ON \
      -DCLANG_DEFAULT_LINKER="/cgnutools/bin/lld" \
      -DLIBRT="/cgnutools/lib/librt.a" 

ninja -C build         && \
ninja -C build install && \ 
rm -rf build
