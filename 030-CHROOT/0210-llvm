# Final System: LLVM
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/llvm-11.0.0.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang-11.0.0.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/compiler-rt-11.0.0.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/lld-11.0.0.src.tar.xz 
#
# This section is done in Chroot environment
cd ${LLVMSRC}
patch -Np1 -i ../src/patches/llvm11-void/llvm-001-musl.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-002-ppcle.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-002-musl-ppc64-elfv2.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-003-ppc-secureplt.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-004-override-opt.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-005-ppc-bigpic.patch
patch -Np1 -i ../src/patches/llvm11-void/llvm-006-aarch64-mf_exec.patch
tar -xf ../pkgsrc/compiler-rt-11.0.0.src.tar.xz  -C projects &&
mv -v projects/compiler-rt-11.0.0.src  projects/compiler-rt
tar -xf ../pkgsrc/clang-11.0.0.src.tar.xz -C tools &&
mv -v tools/clang-11.0.0.src tools/clang && cd tools/clang
patch -Np1 -i ../../../src/patches/llvm11-void/clang-001-fix-unwind-chain-inclusion.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-001-ppcle.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-002-add-musl-triples.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-003-ppc64-dynamic-linker-path.patch
patch -Np1 -i ../../../src/patches/llvm11-void/clang-004-ppc64-musl-elfv2.patch
cd -
tar -xf ../pkgsrc/lld-11.0.0.src.tar.xz -C tools &&
mv -v tools/lld-11.0.0.src tools/lld
# Disable sanitizers for musl-based systems
sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' projects/compiler-rt/cmake/config-ix.cmake 
# Vastly reduce size of debugging symbols:
export CFLAGS=" -g -g1"
export CXXFLAGS=" -g -g1"
cmake -B build -G Ninja \
      -DCMAKE_BUILD_TYPE=MinSizeRel \
      -DCMAKE_INSTALL_PREFIX=/usr \
      -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
      -DLLVM_LINK_LLVM_DYLIB=ON \
      -DLLVM_BUILD_LLVM_DYLIB=ON \
      -DLLVM_BUILD_TESTS=OFF \
      -DLLVM_ENABLE_LIBEDIT=OFF \
      -DLLVM_ENABLE_LIBXML2=OFF \
      -DLLVM_ENABLE_LIBCXX=ON \
      -DLLVM_INCLUDE_GO_TESTS=OFF \
      -DLLVM_INCLUDE_TESTS=OFF \
      -DLLVM_INCLUDE_DOCS=OFF \
      -DLLVM_INCLUDE_EXAMPLES=OFF \
      -DLLVM_INCLUDE_BENCHMARKS=OFF \
      -DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl \
      -DLLVM_HOST_TRIPLE="x86_64-pc-linux-musl" \
      -DLLVM_TARGET_ARCH="X86" \
      -DLLVM_TARGETS_TO_BUILD="host;BPF;AMDGPU;X86" \
      -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl" \
      -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
      -DCOMPILER_RT_BUILD_XRAY=OFF \
      -DCOMPILER_RT_BUILD_PROFILE=OFF \
      -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
      -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
      -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
      -DCLANG_DEFAULT_UNWINDLIB=libunwind \
      -DCLANG_DEFAULT_RTLIB=compiler-rt \
      -DCLANG_DEFAULT_LINKER="/usr/bin/ld.lld" \
      -DDEFAULT_SYSROOT="/llvmtools" \
      -DLLVM_ENABLE_LLD=ON \
      -DLLVM_ENABLE_RTTI=ON \
      -DLLVM_ENABLE_ZLIB=OFF \
      -DBacktrace_INCLUDE_DIR="/usr/include" \
      -DBacktrace_LIBRARY="/usr/lib/libexecinfo.so" \
      -DCMAKE_AR="/llvmtools/bin/llvm-ar" \
      -DCMAKE_INSTALL_OLDINCLUDEDIR="/usr/include" \
      -DCMAKE_LINKER="/llvmtools/bin/ld.lld" \
      -DCMAKE_AR="/llvmtools/bin/llvm-ar" \
      -DCMAKE_LINKER="/llvmtools/bin/ld.lld" \
      -DCMAKE_NM="/llvmtools/bin/llvm-nm" \
      -DCMAKE_OBJCOPY="/llvmtools/bin/llvm-objcopy" \
      -DCMAKE_OBJDUMP="/llvmtools/bin/llvm-objdump" \
      -DCMAKE_RANLIB="/llvmtools/bin/llvm-ranlib" \
      -DCMAKE_READELF="/llvmtools/bin/llvm-readelf" \
      -DCMAKE_STRIP="/llvmtools/bin/llvm-strip" \
      -DICONV_LIBRARY_PATH="/usr/lib/libc.so" \
      -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
      -DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON  \
      -DLLVM_INSTALL_UTILS=ON \
      -DLLVM_ENABLE_BINDINGS=OFF \
      -DLLVM_ENABLE_IDE=OFF \
      -DLLVM_ENABLE_UNWIND_TABLES=OFF \
      -DDEFAULT_SYSROOT="/usr"

ninja -C build
ninja -C build install 

# Install additional binaries that where built, but not installed by ninja -C build install:
cp -vn build/bin/* /usr/bin/

# Unset these flags
unset CFLAGS CXXFLAGS CC CXX

# Set lld as default system linker
ln -sv lld /usr/bin/ld

# Many packages use the name cc to call the C compiler. To 
# satisfy those packages, create a symlink
ln -sv clang-11 /usr/bin/cc

# Create a symlink required by the FHS for "historical" reasons
ln -sv ../usr/bin/clang-11 /lib/cpp
# Build useful utilities.. according to Adelie Linux, these are for BSD-Compatibility.
# It may be done seperately as a package in the future. 
cc -fpie ../files/musl/getent.c -o getent
cc -fpie ../files/musl/getconf.c -o getconf
cc -fpie ../files/musl/iconv.c -o iconv
install -v -D -m755  getent  /usr/bin/
install -v -D -m755  getconf /usr/bin/
install -v -D -m755  iconv   /usr/bin/
install -v -D -m644  ../files/musl/getent.1   /usr/share/man/man1/
install -v -D -m644  ../files/musl/getconf.1  /usr/share/man/man1/

# Test final system's toolchain:
echo 'int main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'
# Should output:
# [Requesting program interpreter: /lib/ld-musl-x86_64.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-i386.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-arm.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-aarch64.so.1]

grep 'ld.lld:' dummy.log | grep 'crt[1in]'
#ld.lld: /usr/lib/Scrt1.o
#ld.lld: /usr/lib/crti.o
#ld.lld: /usr/lib/crtn.o

# Verify that the compiler is searching for the correct 
# header files: 
grep -B1 '^ /usr/include' dummy.log
# Should output:
# #include <...> search starts here:
# /usr/include

# Verify that the new linker is being used with the 
# correct search paths: 
grep -o -- -L/usr/lib dummy.log
#-L/usr/lib

# Once everything is working correctly, clean up 
# the test files:
rm -v dummy.c a.out dummy.log